"use strict";var express=require("express"),router=express.Router(),_require=require("../data/notesDb"),query=_require.query,addNote=_require.addNote,getAllNotes=_require.getAllNotes,deleteNote=_require.deleteNote;query("CREATE TABLE IF NOT EXISTS notes (\n        id INT(200) AUTO_INCREMENT,\n        title VARCHAR(50) NOT NULL,\n        note VARCHAR(300) NOT NULL,\n        created_date DATE DEFAULT (CURRENT_DATE),\n        PRIMARY KEY (id))").then(function(){return console.log("Table Created")}).catch(function(e){return console.log(e)}),router.get("/getAllNotes",function(e,t){var r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(getAllNotes());case 2:r=e.sent,t.send(r);case 4:case"end":return e.stop()}})}),router.post("/addNote",function(t,r){var n,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.body.note,e.next=3,regeneratorRuntime.awrap(addNote(n));case 3:o=e.sent,r.send(o);case 5:case"end":return e.stop()}})}),router.delete("/deleteNote/:noteID",function(t,r){var n,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.params.noteID,e.next=3,regeneratorRuntime.awrap(deleteNote(n));case 3:o=e.sent,r.send(o);case 5:case"end":return e.stop()}})}),module.exports=router;